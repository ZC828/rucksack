<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Rucksack | CSS Superpowers</title>
    <link>https://simplaio.github.io/rucksack/docs/</link>
    <description>Recent content in Docs on Rucksack | CSS Superpowers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-au</language>
    <atom:link href="https://simplaio.github.io/rucksack/docs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Installation &amp; Usage</title>
      <link>https://simplaio.github.io/rucksack/docs/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/usage/</guid>
      <description>&lt;p&gt;Integrating Rucksack into your workflow is easy. There are plugins for most build tools, and an &lt;a href=&#34;https://www.npmjs.com/package/rucksack-css&#34;&gt;npm module&lt;/a&gt; to integrate it manually or process your CSS directly on the command line.&lt;/p&gt;

&lt;p&gt;Since it&amp;rsquo;s built on the &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;PostCSS ecosystem&lt;/a&gt; it plays nice with all other CSS pre and post processors, and can even integrate into Stylus directly.&lt;/p&gt;

&lt;div style=&#34;overflow: auto;&#34;&gt;

&lt;div class=&#34;usage__trigger&#34;&gt;
  &lt;a data-remodal-target=&#39;gulp&#39;&gt;
    &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/gulp.png&#39; class=&#34;usage__trigger__logo&#34; /&gt;
    &lt;span class=&#34;usage__trigger__title&#34;&gt;With Gulp&lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;usage__modal remodal&#34; data-remodal-id=&#39;gulp&#39;&gt;
  &lt;span class=&#34;remodal-close&#34; data-remodal-action=&#34;close&#34; data-icon=&#34;x&#34;&gt;&lt;/span&gt;
  &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/gulp.png&#39; alt=&#34;&#34; class=&#34;usage__modal__logo&#34; /&gt;
  &lt;p&gt;Rucksack has a Gulp plugin - &lt;a href=&#34;https://github.com/simplaio/gulp-rucksack&#34;&gt;gulp-rucksack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install with npm&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install gulp-rucksack --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then setup your gulp task&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;),
    rucksack = require(&#39;gulp-rucksack&#39;);

gulp.task(&#39;rucksack&#39;, function() {
  return gulp.src(&#39;src/style.css&#39;)
    .pipe(rucksack())
    .pipe(gulp.dest(&#39;style.css&#39;));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gulp Rucksack comes with full sourcemap support&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;),
    rucksack = require(&#39;gulp-rucksack&#39;),
    sourcemaps = require(&#39;gulp-sourcemaps&#39;);

gulp.task(&#39;rucksack&#39;, function() {
  return gulp.src(&#39;src/style.css&#39;)
    .pipe(sourcemaps.init())
    .pipe(rucksack())
    .pipe(sourcemaps.write(&#39;.&#39;))
    .pipe(gulp.dest(&#39;style.css&#39;));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;div class=&#34;usage__trigger&#34;&gt;
  &lt;a data-remodal-target=&#39;grunt&#39;&gt;
    &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/grunt.png&#39; class=&#34;usage__trigger__logo&#34; /&gt;
    &lt;span class=&#34;usage__trigger__title&#34;&gt;With Grunt&lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;usage__modal remodal&#34; data-remodal-id=&#39;grunt&#39;&gt;
  &lt;span class=&#34;remodal-close&#34; data-remodal-action=&#34;close&#34; data-icon=&#34;x&#34;&gt;&lt;/span&gt;
  &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/grunt.png&#39; alt=&#34;&#34; class=&#34;usage__modal__logo&#34; /&gt;
  &lt;p&gt;Rucksack has a Grunt plugin - &lt;a href=&#34;https://github.com/simplaio/grunt-rucksack&#34;&gt;grunt-rucksack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install it via npm&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install grunt-rucksack --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then load up your Grunt task&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;require(&#39;load-grunt-tasks&#39;)(grunt);

grunt.initConfig({
    rucksack: {
        compile: {
            files: {
                &#39;style.css&#39;: &#39;src/style.css&#39;
            }
        }
    }
});

grunt.registerTask(&#39;default&#39;, [&#39;rucksack&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;div class=&#34;usage__trigger&#34;&gt;
  &lt;a data-remodal-target=&#39;broccoli&#39;&gt;
    &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/broccoli.png&#39; class=&#34;usage__trigger__logo&#34; /&gt;
    &lt;span class=&#34;usage__trigger__title&#34;&gt;With Broccoli&lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;usage__modal remodal&#34; data-remodal-id=&#39;broccoli&#39;&gt;
  &lt;span class=&#34;remodal-close&#34; data-remodal-action=&#34;close&#34; data-icon=&#34;x&#34;&gt;&lt;/span&gt;
  &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/broccoli.png&#39; alt=&#34;&#34; class=&#34;usage__modal__logo&#34; /&gt;
  &lt;p&gt;Rucksack has a Broccoli plugin - &lt;a href=&#34;https://github.com/simplaio/broccoli-rucksack&#34;&gt;broccoli-rucksack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install via npm&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install broccoli-rucksack --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then setup your tree&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var rucksack = require(&#39;broccoli-rucksack&#39;);
tree = rucksack(tree, [options]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;div class=&#34;usage__trigger&#34;&gt;
  &lt;a data-remodal-target=&#39;cli&#39;&gt;
    &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/cli.png&#39; class=&#34;usage__trigger__logo&#34; /&gt;
    &lt;span class=&#34;usage__trigger__title&#34;&gt;Command Line&lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;usage__modal remodal&#34; data-remodal-id=&#39;cli&#39;&gt;
  &lt;span class=&#34;remodal-close&#34; data-remodal-action=&#34;close&#34; data-icon=&#34;x&#34;&gt;&lt;/span&gt;
  &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/cli.png&#39; alt=&#34;&#34; class=&#34;usage__modal__logo&#34; /&gt;
  &lt;p&gt;Process CSS directly on the command line with the Rucksack CLI tool. It&amp;rsquo;s comes bundled with Rucksack, so you can try it out straight away.&lt;/p&gt;

&lt;p&gt;First install the Rucksack npm module globally&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g rucksack-css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can run the tool from anywhere&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rucksack src/style.css style.css [options]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  --no-autoprefixer   Disable automatic vendor prefixing.

  --no-fallbacks      Disable legacy fallbacks.

  --version,    -v    Show the version number.

  --help,       -h    Show help screen.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;div class=&#34;usage__trigger&#34;&gt;
  &lt;a data-remodal-target=&#39;postcss&#39;&gt;
    &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/postcss.png&#39; class=&#34;usage__trigger__logo&#34; /&gt;
    &lt;span class=&#34;usage__trigger__title&#34;&gt;With PostCSS&lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;usage__modal remodal&#34; data-remodal-id=&#39;postcss&#39;&gt;
  &lt;span class=&#34;remodal-close&#34; data-remodal-action=&#34;close&#34; data-icon=&#34;x&#34;&gt;&lt;/span&gt;
  &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/postcss.png&#39; alt=&#34;&#34; class=&#34;usage__modal__logo&#34; /&gt;
  &lt;p&gt;Rucksack is built on PostCSS, and can be used as a PostCSS plugin.&lt;/p&gt;

&lt;p&gt;First install the npm module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install rucksack-css --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then use it as a plugin for PostCSS&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var postcss = require(&#39;postcss&#39;),
    rucksack = require(&#39;rucksack-css&#39;);

postcss([ rucksack() ])
  .process(css, { from: &#39;src/style.css&#39;, to: &#39;style.css&#39; })
  .then(function (result) {
      fs.writeFileSync(&#39;style.css&#39;, result.css);
      if ( result.map ) fs.writeFileSync(&#39;style.css.map&#39;, result.map);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;PostCSS Docs&lt;/a&gt; for examples for your environment.&lt;/p&gt;

&lt;/div&gt;


&lt;div class=&#34;usage__trigger&#34;&gt;
  &lt;a data-remodal-target=&#39;stylus&#39;&gt;
    &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/stylus.png&#39; class=&#34;usage__trigger__logo&#34; /&gt;
    &lt;span class=&#34;usage__trigger__title&#34;&gt;With Stylus&lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;usage__modal remodal&#34; data-remodal-id=&#39;stylus&#39;&gt;
  &lt;span class=&#34;remodal-close&#34; data-remodal-action=&#34;close&#34; data-icon=&#34;x&#34;&gt;&lt;/span&gt;
  &lt;img src=&#39;https://simplaio.github.io/rucksack/img/usage/stylus.png&#39; alt=&#34;&#34; class=&#34;usage__modal__logo&#34; /&gt;
  &lt;p&gt;Rucksack can be used as a Stylus plugin with &lt;a href=&#34;https://github.com/seaneking/poststylus&#34;&gt;PostStylus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First install the npm module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install rucksack-css --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then pass it directly to PostStylus&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var poststylus = require(&#39;poststylus&#39;);

stylus(css).use(
  poststylus(&#39;rucksack-css&#39;)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/seaneking/poststylus&#34;&gt;PostStylus Docs&lt;/a&gt; for examples for your environment.&lt;/p&gt;

&lt;/div&gt;


&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Options</title>
      <link>https://simplaio.github.io/rucksack/docs/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/options/</guid>
      <description>

&lt;p&gt;Rucksack is fully modular, you can turn any of its features on or off to customize it to your needs. Just pass the feature name and a boolean during initialization in your build tool. By default core features are set to &lt;code&gt;true&lt;/code&gt;, and optional addons are set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set in build tool
.rucksack({
  clearFix: false,
  fallbacks: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;core-feature-toggles:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Core feature toggles&lt;/h2&gt;

&lt;p&gt;All default to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#responsive-type&#34;&gt;&lt;code&gt;responsiveType&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#shorthand-position&#34;&gt;&lt;code&gt;shorthandPosition&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#quantity-pseudo&#34;&gt;&lt;code&gt;quantityQueries&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#alias&#34;&gt;&lt;code&gt;alias&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#input&#34;&gt;&lt;code&gt;inputPseudo&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#clearfix&#34;&gt;&lt;code&gt;clearFix&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#font-src&#34;&gt;&lt;code&gt;fontPath&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#hexrgba&#34;&gt;&lt;code&gt;hexRGBA&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#easings&#34;&gt;&lt;code&gt;easings&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;addon-toggles:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Addon toggles&lt;/h2&gt;

&lt;p&gt;All default to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#fallbacks&#34;&gt;&lt;code&gt;fallbacks&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#autoprefixing&#34;&gt;&lt;code&gt;autoprefixer&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;error-reporting:e4e1609209f0cd02c1d50b647b7ad7b2&#34;&gt;Error reporting&lt;/h2&gt;

&lt;p&gt;Enable reporting, which outputs verbose errors and messages from all of the plugins used inside Rucksack to your console, with the &lt;code&gt;reporter&lt;/code&gt; flag. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Responsive Typography</title>
      <link>https://simplaio.github.io/rucksack/docs/responsive-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/responsive-type/</guid>
      <description>

&lt;p&gt;Create automagical fluid typography with a new &lt;code&gt;responsive&lt;/code&gt; property on &lt;code&gt;font-size&lt;/code&gt;. All the type on this site is responsive, resize your browser to see it in action!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://simplaio.github.io/rucksack/img/type-demo.gif&#34; alt=&#34;Responsive Type Demo&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;quick-start:a6b7c01268140345226b1acb4b782f4d&#34;&gt;Quick start&lt;/h2&gt;

&lt;p&gt;Rucksack&amp;rsquo;s responsive typography is fully adjustable, but all you need to get started is to specify &lt;code&gt;responsive&lt;/code&gt; as a font-size.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  font-size: responsive;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;specifying-parameters:a6b7c01268140345226b1acb4b782f4d&#34;&gt;Specifying parameters&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll probably want to change those defaults and have some control over the bounds of a font size. The best way to do this is with a new shorthand syntax in &lt;code&gt;font-size&lt;/code&gt;, and a new property called &lt;code&gt;font-range&lt;/code&gt;. Font range specifies the viewport widths between which the font size is fluid, outside of this range the font sizes are set to min/max values.&lt;/p&gt;

&lt;p&gt;The format of each property is very simple&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;font-size: responsive [min-font-size] [max-font-size]
font-range: [lower-bound] [upper-bound]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;html {
  font-size: responsive 12px 21px;
  font-range: 420px 1280px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All values can be in &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;, or &lt;code&gt;em&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;expanded-syntax:a6b7c01268140345226b1acb4b782f4d&#34;&gt;Expanded syntax&lt;/h2&gt;

&lt;p&gt;You can also specify all of these values with independent properties&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;html {
  font-size: responsive;
  min-font-size: 12px;
  max-font-size: 21px;
  lower-font-range: 420px;
  upper-font-range: 1280px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output:a6b7c01268140345226b1acb4b782f4d&#34;&gt;Output&lt;/h2&gt;

&lt;p&gt;Rucksack&amp;rsquo;s responsive typography outputs complex calc and vw based font-sizes, along with media queries to set the range between which a font size is fluid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;html {
  font-size: calc(12px + 9 * ( (100vw - 420px) / 860));
}

@media screen and (max-width: 420px) {
  html {
    font-size: 12px;
  }
}

@media screen and (min-width: 1280px) {
  html {
    font-size: 21px;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the calc expression above being equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;min-size + (min-size - max-size) * ( (100vw - min-width) / ( max-width - min-width) )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defaults:a6b7c01268140345226b1acb4b782f4d&#34;&gt;Defaults&lt;/h2&gt;

&lt;p&gt;To get started you only need to specify &lt;code&gt;font-size: responsive;&lt;/code&gt;, all other properties have sane defaults.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;min-font-size: 14px
max-font-size: 21px
lower-font-range: 420px
upper-font-range: 1280px
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;supporting-legacy-browsers:a6b7c01268140345226b1acb4b782f4d&#34;&gt;Supporting legacy browsers&lt;/h2&gt;

&lt;p&gt;Rucksack&amp;rsquo;s responsive typography works on all modern browsers (IE9+). Legacy browsers will ignore the output font-size, so it&amp;rsquo;s very easy to provide a static fallback.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;html {
  font-size: 16px;
  font-size: responsive;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shorthand Positioning</title>
      <link>https://simplaio.github.io/rucksack/docs/shorthand-positioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/shorthand-positioning/</guid>
      <description>

&lt;p&gt;Rucksack brings the shorthand methods used by properties like &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; to position offsets. The same syntaxes apply&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;- position: [type] [all];
- position: [type] [y] [x];
- position: [type] [top] [x] [bottom];
- position: [type] [top] [right] [bottom] [left];
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;input:b6fc1cce8611b6d1f819c4ab98d2a9e9&#34;&gt;Input&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  position: absolute 0;
}

.bar {
  position: relative 20% auto;
}

.baz {
  position: fixed 0 20px 10px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output:b6fc1cce8611b6d1f819c4ab98d2a9e9&#34;&gt;Output&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.bar {
  position: relative;
  top: 20%;
  right: auto;
  bottom: 20%;
  left: auto;
}

.baz {
  position: fixed;
  top: 0;
  right: 20px;
  bottom: 10px;
  left: 20px;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Quantity Pseudo-Selectors</title>
      <link>https://simplaio.github.io/rucksack/docs/quantity-pseudo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/quantity-pseudo/</guid>
      <description>

&lt;p&gt;Rucksack adds pseudo-selectors to select and style elements based on their quantity. Use them to build powerful, responsive, content-driven designs.&lt;/p&gt;

&lt;h2 id=&#34;at-least:0480254488cd73f5063255190d7f32dd&#34;&gt;:at-least&lt;/h2&gt;

&lt;p&gt;Applies if there are a certain number of items or more&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li:at-least(4) {
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;at-most:0480254488cd73f5063255190d7f32dd&#34;&gt;:at-most&lt;/h2&gt;

&lt;p&gt;Applies if there are a certain number of items or less&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li:at-most(4) {
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;between:0480254488cd73f5063255190d7f32dd&#34;&gt;:between&lt;/h2&gt;

&lt;p&gt;Applies to all items between a certain range&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li:between(4, 6) {
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exactly:0480254488cd73f5063255190d7f32dd&#34;&gt;:exactly&lt;/h2&gt;

&lt;p&gt;Applies when there are exactly a number of items&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li:exactly(4) {
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-it-works:0480254488cd73f5063255190d7f32dd&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;The quanitity based pseudo-selectors style elements based on their sibling count, using constructions like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li:nth-last-child(n+4),
li:nth-last-child(n+4) ~ li
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a more in-depth look at how this works and how to take advantage of it in your designs, read the recent article on A List Apart - &lt;a href=&#34;http://alistapart.com/article/quantity-queries-for-css&#34;&gt;Quantity Queries for CSS&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Input Pseudo-Elements</title>
      <link>https://simplaio.github.io/rucksack/docs/input/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/input/</guid>
      <description>

&lt;p&gt;Rucksack adds new pseudo-elements that allow you to easily style the inner elements of HTML5 inputs across browsers. Currently the only element supported is the range input (and &lt;code&gt;::placeholder&lt;/code&gt; if you enable automatic vendor prefixing), more will be added as browser vendors open up their APIs.&lt;/p&gt;

&lt;p&gt;Note that the rules in the output generated (see below) are duplicated, since if a browser finds a single selector it doesn&amp;rsquo;t understand in a group the whole group is ignored (see &lt;a href=&#34;http://www.w3.org/TR/selectors/#Conformance&#34;&gt;Selectors Level 3&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;range-elements:0fa58901273a043169cc0dfabb934c88&#34;&gt;Range Elements&lt;/h2&gt;

&lt;p&gt;Style the notoriously tricky range input with &lt;code&gt;::track&lt;/code&gt; and &lt;code&gt;::thumb&lt;/code&gt;. Track targets the &amp;lsquo;line&amp;rsquo;, while thumb targets the &amp;lsquo;button&amp;rsquo;. They can be applied to any range element, or at the root of your stylesheet for global styling.&lt;/p&gt;

&lt;p&gt;Input&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;input[type=&amp;quot;range&amp;quot;]::track {
  background: #9d9d9d;
  height: 3px;
}

input[type=&amp;quot;range&amp;quot;]::thumb {
  background: #4286be;
  width: 16px;
  height: 8px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;input[type=&amp;quot;range&amp;quot;]::-webkit-slider-runnable-track {
  -webkit-appearance: none;
  background: #9d9d9d;
  height: 3px;
}

input[type=&amp;quot;range&amp;quot;]::-moz-range-track  {
  -moz-appearance: none;
  background: #9d9d9d;
  height: 3px;
}

input[type=&amp;quot;range&amp;quot;]::-ms-track  {
  background: #9d9d9d;
  height: 3px;
}

input[type=&amp;quot;range&amp;quot;]::-webkit-slider-thumb {
  -webkit-appearance: none;
  background: #4286be;
  width: 16px;
  height: 8px;
}

input[type=&amp;quot;range&amp;quot;]::-moz-range-thumb {
  -moz-appearance: none;
  background: #4286be;
  width: 16px;
  height: 8px;
}

input[type=&amp;quot;range&amp;quot;]::-ms-thumb {
  background: #4286be;
  width: 16px;
  height: 8px;
}
input[type=&amp;quot;range&amp;quot;] {
  -webkit-appearance: none;
}
input[type=range]::-moz-focus-outer {
  border: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-webkit-appearance: none;&lt;/code&gt; and &lt;code&gt;-moz-appearance: none;&lt;/code&gt; declarations are added to relevant elements so that your custom styles are properly applied. Note that this means that for webkit (Chrome, etc) you must style &lt;em&gt;both&lt;/em&gt; &lt;code&gt;::track&lt;/code&gt; and &lt;code&gt;::thumb&lt;/code&gt;, since the appearance must be set on the root element.&lt;/p&gt;

&lt;p&gt;The additional &lt;code&gt;::-moz-focus-outer&lt;/code&gt; rule simply removes the dotted outline around the element on some versions of firefox.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Native Clearfix</title>
      <link>https://simplaio.github.io/rucksack/docs/clearfix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/clearfix/</guid>
      <description>

&lt;p&gt;Rucksack bundles up common clearfix methods into native methods of the &lt;code&gt;clear&lt;/code&gt; property. A &amp;lsquo;clearfix&amp;rsquo; is a method of making a parent element self-clear it&amp;rsquo;s children, so floats are contained.&lt;/p&gt;

&lt;p&gt;Two new methods are added, &lt;code&gt;fix&lt;/code&gt; and &lt;code&gt;fix-legacy&lt;/code&gt;. Both achieve the same outcome, with different levels of browser support. &lt;code&gt;fix&lt;/code&gt; outputs cleaner code and is all that is needed for IE8+, &lt;code&gt;fix-legacy&lt;/code&gt; support IE6/7.&lt;/p&gt;

&lt;h2 id=&#34;input:429b051e2a153a8670a70870dfc912ea&#34;&gt;Input&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  clear: fix;
}

.bar {
  clear: fix-legacy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output:429b051e2a153a8670a70870dfc912ea&#34;&gt;Output&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* fix */
.foo:after{
  content: &#39;&#39;;
  display: table;
  clear: both;
}

/* fix-legacy */
.bar:before,
.bar:after {
  content: &#39;&#39;;
  display: table;
}
.bar:after {
  clear: both;
}
.bar {
  zoom: 1;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Font Src Expansion</title>
      <link>https://simplaio.github.io/rucksack/docs/font-src/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/font-src/</guid>
      <description>

&lt;p&gt;Rucksack provides a shortcut method to generate bulletproof &lt;code&gt;src&lt;/code&gt; sets in &lt;code&gt;@font-face&lt;/code&gt;, with a new &lt;code&gt;font-path&lt;/code&gt; property. Just set the path to your font files in &lt;code&gt;font-path&lt;/code&gt;, and it will output a src set based on the &lt;a href=&#34;http://blog.fontspring.com/2011/02/further-hardening-of-the-bulletproof-syntax/&#34;&gt;FontSpring syntax&lt;/a&gt;. Note that &lt;code&gt;font-path&lt;/code&gt; must be to the font &lt;em&gt;file&lt;/em&gt;, not just the directory containing the files.&lt;/p&gt;

&lt;h2 id=&#34;input:f2abd75841bca483d201861228f32bc3&#34;&gt;Input&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@font-face {
  font-family: &#39;My Font&#39;;
  font-path: &#39;/my/font/file&#39;;
  font-weight: normal;
  font-style: normal;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output:f2abd75841bca483d201861228f32bc3&#34;&gt;Output&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@font-face {
  font-family: &#39;My Font&#39;;
  src: url(&amp;quot;/my/font/file.eot&amp;quot;);
  src: url(&amp;quot;/my/font/file.eot?#iefix&amp;quot;) format(&#39;embedded-opentype&#39;),
       url(&amp;quot;/my/font/file.woff&amp;quot;) format(&#39;woff&#39;),
       url(&amp;quot;/my/font/file.ttf&amp;quot;) format(&#39;truetype&#39;),
       url(&amp;quot;/my/font/file.svg&amp;quot;) format(&#39;svg&#39;);
  font-weight: normal;
  font-style: normal;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hex RGBA Shortcuts</title>
      <link>https://simplaio.github.io/rucksack/docs/hexrgba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/hexrgba/</guid>
      <description>

&lt;p&gt;Rucksack provides an easy shortcut to add an alpha channel to any hex color. Just add the hex value you want to convert in place of the RGB value in &lt;code&gt;rgba()&lt;/code&gt;. The hex is converted to RGB and output as a proper &lt;code&gt;rgba()&lt;/code&gt; property.&lt;/p&gt;

&lt;h2 id=&#34;input:2f57e4051bfff2585e887fe1e8adf84e&#34;&gt;Input&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  color: rgba(#fff, 0.8);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output:2f57e4051bfff2585e887fe1e8adf84e&#34;&gt;Output&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  color: rgba(255,255,255, 0.8);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Property Aliases</title>
      <link>https://simplaio.github.io/rucksack/docs/alias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/alias/</guid>
      <description>

&lt;p&gt;Rucksack allows you to set aliases for long property names and save some of those precious keystrokes. To set an alias simply add it to the &lt;code&gt;@alias&lt;/code&gt; rule in the format of &lt;code&gt;[alias]: [property];&lt;/code&gt;. Aliases are global in a stylesheet, so it&amp;rsquo;s a good idea to have just a single &lt;code&gt;@alias&lt;/code&gt; rule in your project and specify all aliases in one place.&lt;/p&gt;

&lt;h2 id=&#34;input:3b3d2541cd37edc022b27d62280cdf2f&#34;&gt;Input&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@alias {
  fs: font-size;
  fw: font-weight;
}

.foo {
  fs: 16px;
  fw: bold;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output:3b3d2541cd37edc022b27d62280cdf2f&#34;&gt;Output&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  font-size: 16px;
  font-weight: bold
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using aliases inside propety values is not supported&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@alias {
  op: opacity;
}

.foo {
  /* Not supported! */
  transition: op 300ms ease;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>All The Easings</title>
      <link>https://simplaio.github.io/rucksack/docs/easings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/easings/</guid>
      <description>

&lt;p&gt;Rucksack comes with a whole library of modern easing functions for you to instantly use in CSS transitions and animations. The new easings are translated to &lt;code&gt;cubic-bezier()&lt;/code&gt; functions on output that CSS can natively understand.&lt;/p&gt;

&lt;h2 id=&#34;input:6d1c8b29b26740a06ca5162cd12d9211&#34;&gt;Input&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  transition: all 250ms ease-in-cubic;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output:6d1c8b29b26740a06ca5162cd12d9211&#34;&gt;Output&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  transition: all 250ms cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-sine&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-sine&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-out-sine&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-out-sine&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-out-sine&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-out-sine&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-quad&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-quad&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-out-quad&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-out-quad&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-out-quad&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-out-quad&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-cubic&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-cubic&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-out-cubic&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-out-cubic&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-out-cubic&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-out-cubic&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-quart&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-quart&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-out-quart&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-out-quart&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-out-quart&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-out-quart&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-quint&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-quint&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-out-quint&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-out-quint&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-out-quint&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-out-quint&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-expo&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-expo&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-out-expo&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-out-expo&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-out-expo&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-out-expo&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-circ&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-circ&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-out-circ&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-out-circ&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-out-circ&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-out-circ&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-back&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-back&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-out-back&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-out-back&lt;/code&gt;
&lt;/div&gt;

  &lt;div class=&#34;easing&#34;&gt;
  &lt;div class=&#34;easing__track&#34;&gt;
    &lt;span class=&#34;easing__track__marker ease-in-out-back&#34;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;code class=&#34;easing__name&#34;&gt;ease-in-out-back&lt;/code&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Legacy Fallbacks</title>
      <link>https://simplaio.github.io/rucksack/docs/fallbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/fallbacks/</guid>
      <description>

&lt;p&gt;Rucksack can pass your styles through &lt;a href=&#34;https://github.com/seaneking/laggard&#34;&gt;Laggard&lt;/a&gt;, which provides legacy fallbacks for many properties, making old browser support a breeze.&lt;/p&gt;

&lt;p&gt;This is an optional add-on, and can be toggled on or off with the &lt;code&gt;fallbacks&lt;/code&gt; option, passed to Rucksack on initialization. By default fallbacks is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var rucksack = require(&#39;rucksack-css&#39;);

// Set in build tool, etc.
rucksack({
  fallbacks: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;opacity:55a54716ffff7e4c378dc72dd3df4c9b&#34;&gt;Opacity&lt;/h2&gt;

&lt;p&gt;Generates the appropriate ms filter for achieving transparencies on IE8.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  opacity: 0.8;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  -ms-filter: &amp;quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=80)&amp;quot;;
  opacity: 0.8;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rgba:55a54716ffff7e4c378dc72dd3df4c9b&#34;&gt;RGBA&lt;/h2&gt;

&lt;p&gt;Generates a hexidecimal fallback to &lt;code&gt;rgba()&lt;/code&gt; for &amp;lt;IE8&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
   background: rgba(153, 221, 153, 0.8);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  background: #99DD99;
  background: rgba(153, 221, 153, 0.8);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rem-units:55a54716ffff7e4c378dc72dd3df4c9b&#34;&gt;Rem units&lt;/h2&gt;

&lt;p&gt;Creates a &lt;code&gt;px&lt;/code&gt; fallback to &lt;code&gt;rem&lt;/code&gt; unit sizing, calculated from the document root (defined in &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;:root&lt;/code&gt;, or falling back to &lt;code&gt;16px&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  font-size: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  font-size: 32px;
  font-size: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pseudo-elements:55a54716ffff7e4c378dc72dd3df4c9b&#34;&gt;Pseudo elements&lt;/h2&gt;

&lt;p&gt;Converts &lt;code&gt;::pseudo&lt;/code&gt; elements to the CSS2-friendly single-colon style.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo::before {
  content: &#39;&#39;;
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo:before {
  content: &#39;&#39;;
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vmin:55a54716ffff7e4c378dc72dd3df4c9b&#34;&gt;vmin&lt;/h2&gt;

&lt;p&gt;Creates a &lt;code&gt;vm&lt;/code&gt; fallback to the &lt;code&gt;vmin&lt;/code&gt; unit for IE9&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  width: 50vmin;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  width: 50vm;
  width: 50vmin;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;will-change:55a54716ffff7e4c378dc72dd3df4c9b&#34;&gt;will-change&lt;/h2&gt;

&lt;p&gt;Inserts a 3D acceleration hack to emulate the &lt;code&gt;will-change&lt;/code&gt; property, using &lt;code&gt;backface-visibility&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  will-change: transform;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  backface-visibility: hidden;
  will-change: transform;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Automatic Prefixing</title>
      <link>https://simplaio.github.io/rucksack/docs/autoprefixing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simplaio.github.io/rucksack/docs/autoprefixing/</guid>
      <description>

&lt;p&gt;Rucksack comes with the option to run your code through &lt;a href=&#34;https://github.com/postcss/autoprefixer&#34;&gt;Autoprefixer&lt;/a&gt;. Autoprefixer automatically applies relevant vendor prefixes based on current browser popularity and property support (from &lt;a href=&#34;http://caniuse.com/&#34;&gt;CanIUse&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is an optional add-on, and can be toggled on or off with the &lt;code&gt;autoprefixer&lt;/code&gt; option, passed to Rucksack on initialization. By default autoprefixer is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var rucksack = require(&#39;rucksack-css&#39;);

// Set in build tool, etc.
rucksack({
  autoprefixer: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;prefixing:e27a3ba1da1b19b58bd55213ecae100a&#34;&gt;Prefixing&lt;/h2&gt;

&lt;p&gt;Head over to &lt;a href=&#34;http://caniuse.com&#34;&gt;CanIUse&lt;/a&gt; to see what kind of prefixes will be applied for various properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  display: flex
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cleaning:e27a3ba1da1b19b58bd55213ecae100a&#34;&gt;Cleaning&lt;/h2&gt;

&lt;p&gt;Autoprefixer also cleans your code of old, unnecessary vendor prefixes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  -webkit-border-radius: 5px;
          border-radius: 5px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.foo {
  border-radius: 5px;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>